/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.mavenproject1;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.Image;
import java.awt.Insets;
import java.awt.Toolkit;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JSplitPane;
import javax.swing.JTextArea;
import javax.swing.JTextPane;
import javax.swing.SwingConstants;
import javax.swing.border.Border;
import javax.swing.border.EmptyBorder;

import org.example.Acciones;
import org.example.utils.CppFormatter;
import org.example.utils.FontLoader;
import org.example.utils.LiveKeywordHighlighter;
import org.example.utils.NumeroLinea;
import org.example.utils.QuickTerminal;

/**
 *
 * @author Isa
 */
public class Mavenproject1 extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
    public Mavenproject1() {
        initComponents();
        initDesign();
    }


    private void initDesign() {

         // Obtener la ruta del archivo de icono
         String iconPath = new File("").getAbsolutePath() + "/resources/img/lambda.png";
         File iconFile = new File(iconPath);
         
         // Verificar si el archivo de icono existe
         if (iconFile.exists()) {
            
            ImageIcon originalIcon = new ImageIcon(iconPath);
            Image image = originalIcon.getImage();

            // Escalar la imagen a un tamaño adecuado (ejemplo: 64x64)
            Image scaledImage = image.getScaledInstance(64, 64, Image.SCALE_SMOOTH);

            // Crear un ImageIcon a partir de la imagen escalada
            ImageIcon icon = new ImageIcon(scaledImage);
             // Establecer el icono del JFrame
             setIconImage(icon.getImage());
         } else {
             System.err.println("No se pudo encontrar el archivo de icono: " + iconPath);
         }


        Font font = getFont();
        try {
            font = new Font("SF Pro", Font.PLAIN, 12);
         } catch (Exception e) {
             System.out.println("Error load Font in JFrame");
         }

        jMenu1.setFont(font);
        jMenu3.setFont(font);
        jMenuBar1.setFont(font);
        jMenuItem1.setFont(font);
        jMenuItem2.setFont(font);
        jMenuItem3.setFont(font);
        jMenuItem4.setFont(font);
        
        jMenu1.setMargin(new Insets(5, 10, 2, 10));
        jMenu3.setMargin(new Insets(5, 10, 2, 10));

        JMenu spaceMenu = new JMenu(" ");
        spaceMenu.setMargin(new Insets(5, 10, 2, 10));
        jMenuBar1.add(spaceMenu,0);
        spaceMenu.setEnabled(false);

        archive.setMargin(new Insets(4, 10, 3, 10));
        jMenuBar1.add(archive);
        archive.setFont(new Font("SF Pro", Font.PLAIN, 13));
        archive.setEnabled(false);

    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Compilador");
        setLocationByPlatform(true);

        // jTextArea2 = new LiveKeywordHighlighter("paper-color-cpp");
        jTextArea2 = new JTextPane();
        jTextPane1 = new LiveKeywordHighlighter("");
     
        jScrollPane2.setAutoscrolls(true);

        jTextPane1.setEditable(true); // Si quieres que sea editable
        jTextArea2.setEditable(true);

        NumeroLinea linea = new NumeroLinea(jTextPane1);

        // jTextPane1.setColumns(20);
        // jTextPane1.setLineWrap(true);
        // jTextPane1.setRows(5);
        jScrollPane1.setRowHeaderView(linea);
        // jScrollPane1.setViewportView(jTextPane1);
        jScrollPane1.setViewportView(jTextPane1);
        

        
        // jTextArea2.setColumns(20);
        // jTextArea2.setLineWrap(true);
        // jTextArea2.setRows(5);
        // jTextArea2.setWrapStyleWord(true);
        jTextArea2.setFont(new Font("RobotoMono-Regular", Font.PLAIN, 14));
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        Dimension maxSize = new Dimension(screenSize.width, screenSize.height);
        jTextArea2.setMaximumSize(maxSize);
        jTextPane1.setMaximumSize(maxSize); 
        jTextArea2.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jScrollPane3.setViewportView(jTextArea2);


        // Ajuste de diseño de jPanel1
        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(34,34,34)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 325, Short.MAX_VALUE)
                    .addGap(18, 18, 18)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 326, Short.MAX_VALUE)
                    .addGap(35,35,35))
                );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1)
                        .addComponent(jScrollPane3))
                    .addContainerGap())
        );

        
        JLabel labelPseudo = new JLabel("Pseudo");
        JLabel labelCpp = new JLabel("C++");

        labelCpp.setLayout(null);
        labelCpp.setOpaque(true);
        labelCpp.setForeground(new Color(255,255,255));
        labelCpp.setBackground(new Color(0,0,0,80));
        jTextArea2.add(labelCpp);

        labelPseudo.setLayout(null);
        labelPseudo.setOpaque(true);
        // labelPseudo.setBackground(Color.RED);
        labelPseudo.setForeground(new Color(255,255,255));
        labelPseudo.setBackground(new Color(0,0,0,80));
       
        jTextPane1.add(labelPseudo);

        try {
            Font font = new Font("SF Pro", Font.BOLD, 14);
            labelCpp.setFont(font);
            labelPseudo.setFont(font);
        } catch (Exception e) {
        
        }

        // labelCpp.setBounds((int)(jPanel1.getPreferredSize().getWidth()/2)-200,jPanel1.getHeight(), 100,100);
        labelCpp.setHorizontalAlignment(SwingConstants.CENTER);
        labelPseudo.setHorizontalAlignment(SwingConstants.CENTER);
        jPanel1.setMaximumSize(maxSize);
        jScrollPane1.setEnabled(false);
        jScrollPane3.setEnabled(false);
        jScrollPane1.setMaximumSize(maxSize);
        jScrollPane3.setMaximumSize(maxSize);
        jScrollPane1.setPreferredSize(new Dimension(300, 300));
        jScrollPane3.setPreferredSize(new Dimension(300, 300));
        jScrollPane1.setMinimumSize(new Dimension(300, 300));
        jScrollPane3.setMinimumSize(new Dimension(300, 300));
        jPanel1.addComponentListener(new ComponentAdapter() {
            @Override
            public void componentResized(ComponentEvent e) {
                // Obtener el tamaño actual del panel
                int panelWidth = (int)jPanel1.getWidth();

                // Calcular la posición del labelCpp
                int labelWidth = 100; // Ancho del JLabel
                int labelHeight = 20; // Alto del JLabel
                int labelX = (panelWidth / 2) - 145; // Centrado horizontal
                int labelX2 = (panelWidth / 2) - 180; // Centrado horizontal
                int labelY = 0; // 10 píxeles de margen desde abajo

                // Establecer la posición del JLabel
                labelCpp.setBounds(labelX, labelY, labelWidth, labelHeight);
                labelPseudo.setBounds(labelX2,labelY,labelWidth,labelHeight);
            }
        });



          //jScrollPane2.setViewportView(jPanel1);
      
        int paddingSize = 10; // Tamaño del padding en píxeles
        Border paddingBorder = BorderFactory.createEmptyBorder(paddingSize, 0, 0, 0);
        jPanel1.setBorder(paddingBorder);
            
         // Obtener el panel de consola
        JPanel consolePanel = new JPanel(); 

        // Crear el JSplitPane y agregar el jPanel1 y el consolePanel
        splitPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT, jPanel1, consolePanel);
        splitPane.setResizeWeight(1); // Set the resize weight to allocate more space to the text area

        // Ajusta las configuraciones necesarias para el jPanel1 y el consolePanel
        jPanel1.setMinimumSize(new Dimension(300, 10));
        consolePanel.setMinimumSize(new Dimension(300, 30));
        consolePanel.setSize(100,30);
    
        
        // Crear botones para el header
        

        // Obtener la ruta del archivo de icono
        String path = new File("").getAbsolutePath() + "/resources/img/";

        iconConsola = new ImageIcon(path + "terminal.png");
        iconClear = new ImageIcon(path + "clear.png");
        iconMax = new ImageIcon(path + "max.png");
        iconMin = new ImageIcon(path + "min.png");
        iconClear_hover = new ImageIcon(path + "clear_hover.png");
        iconMax_hover = new ImageIcon(path + "max_hover.png");
        iconMin_hover = new ImageIcon(path + "min_hover.png");
       
        try{ 
          iconClear = new ImageIcon(iconClear.getImage().getScaledInstance(20, 20, Image.SCALE_SMOOTH)); 
          iconMax = new ImageIcon(iconMax.getImage().getScaledInstance(20, 20, Image.SCALE_SMOOTH));
          iconMin = new ImageIcon(iconMin.getImage().getScaledInstance(20, 20, Image.SCALE_SMOOTH));
          iconClear_hover = new ImageIcon(iconClear_hover.getImage().getScaledInstance(20, 20, Image.SCALE_SMOOTH)); 
          iconMax_hover = new ImageIcon(iconMax_hover.getImage().getScaledInstance(20, 20, Image.SCALE_SMOOTH));
          iconMin_hover = new ImageIcon(iconMin_hover.getImage().getScaledInstance(20, 20, Image.SCALE_SMOOTH));
          iconConsola = new ImageIcon(iconConsola.getImage().getScaledInstance(20, 20, Image.SCALE_SMOOTH));

        }catch(Exception e){
          System.out.println(e);
        }

        JLabel clearButton = new JLabel(iconClear);
        JLabel maximizeButton = new JLabel(iconMax);
        JLabel minimizeButton = new JLabel(iconMin);
        JLabel consoleLabel = new JLabel(iconConsola);
        
        ventana = this;

        clearButton.addMouseListener(new MouseAdapter() {
  
            @Override
            public void mouseEntered(MouseEvent e) {
                    // Cambiar la apariencia cuando el mouse entra al JLabel
                clearButton.setIcon(iconClear_hover); // Cambia el icono por otro con efecto hover
            }
        
            @Override
            public void mouseExited(MouseEvent e) {
                    // Restaurar la apariencia cuando el mouse sale del JLabel
                clearButton.setIcon(iconClear); // Restaura el icono original
            }

            @Override
            public void mouseClicked(MouseEvent e) {
                //quickTerminal.clearTextArea(); //Mal implementado, demasiado confuso
                quickTerminal.ejecutar(new File(""));
                // Acción a realizar cuando se hace clic en el botón de limpiar
            }
        });

        maximizeButton.addMouseListener(new MouseAdapter() {
  
          @Override
          public void mouseEntered(MouseEvent e) {
              // Cambiar la apariencia cuando el mouse entra al JLabel
              maximizeButton.setIcon(iconMax_hover); // Cambia el icono por otro con efecto hover
          }

          @Override
          public void mouseExited(MouseEvent e) {
              // Restaurar la apariencia cuando el mouse sale del JLabel
              maximizeButton.setIcon(iconMax); // Restaura el icono original
          }

          @Override
          public void mouseClicked(MouseEvent e) {
              double maxWeight = 0; // Peso máximo para maximizar el split
              splitPane.setDividerLocation(10);
              splitPane.revalidate();
              // System.out.println("click max");
          }
        });

        minimizeButton.addMouseListener(new MouseAdapter() {
  
          @Override
          public void mouseEntered(MouseEvent e) {
              // Cambiar la apariencia cuando el mouse entra al JLabel
              minimizeButton.setIcon(iconMin_hover); // Cambia el icono por otro con efecto hover
          }

          @Override
          public void mouseExited(MouseEvent e) {
              // Restaurar la apariencia cuando el mouse sale del JLabel

              minimizeButton.setIcon(iconMin); // Restaura el icono original
          }

          @Override
          public void mouseClicked(MouseEvent e) {
             double maxWeight = 1; // Peso máximo para maximizar el split
             splitPane.setResizeWeight(maxWeight); // Establecer el peso del resize para maximizar el split
             splitPane.setDividerLocation(ventana.getSize().height-100);
             System.out.println(ventana.getSize().height-100);
             // System.out.println("click min");
          }
        });


        JPanel headerPanel = new JPanel(new BorderLayout());

        // Crear un JPanel para el header con botones
        JPanel labelPanel = new JPanel();
        labelPanel.setLayout(new FlowLayout(FlowLayout.RIGHT)); // Alinea los botones a la izquierda
        
  
        headerPanel.add(consoleLabel, BorderLayout.WEST);
  
        // Agregar los botones al headerPanel
        labelPanel.add(clearButton);
        labelPanel.add(minimizeButton);
        labelPanel.add(maximizeButton);

        headerPanel.add(labelPanel, BorderLayout.EAST);

        // Agregar el headerPanel al consolePanel en la región norte
        consolePanel.setLayout(new BorderLayout());
        consolePanel.add(headerPanel, BorderLayout.NORTH);
        
        quickTerminal = new QuickTerminal();

        consolePanel.add(quickTerminal.getJPanelTerminal(), BorderLayout.CENTER);
        consolePanel.setBackground(Color.WHITE);
        headerPanel.setBackground(Color.WHITE);
        labelPanel.setBackground(Color.WHITE);
       
        consoleLabel.setBorder(new EmptyBorder(0, 10, 0, 0));
        labelPanel.setBorder(new EmptyBorder(0,0,0,10));

        jMenu1.setText("File");
        jMenu1.setIconTextGap(0);
        jMenu1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu1MouseClicked(evt);
            }
        });

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem1.setText("Abrir Archivo");
        jMenuItem1.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem2.setText("Guardar Archivo");
        jMenuItem2.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu3.setText("Run");
        jMenu3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jMenu3.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_DOWN_MASK | java.awt.event.InputEvent.ALT_DOWN_MASK));
        jMenuItem3.setText("Compilar");
        jMenuItem3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jMenuItem3.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem3);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem4.setText("Ejecutar");
        jMenuItem4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jMenuItem4.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem4);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);
        
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(splitPane)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(splitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 535, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);


    }// </editor-fold>//GEN-END:initComponents

    

    private void jMenu1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu1MouseClicked

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        Acciones.abrirArchivo(jTextPane1);
    }                                          

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {               
        Acciones.guardar(obtenerArchivo());
    }                                          

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        Acciones.compilar(obtenerArchivo());
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // coloque obtener archivo, pero me tienen que enviar el archivo compilado en la opcion 3
        // mira la clase de acciones para mas informacion al respecto
        // att. Nestor
        //Acciones.ejecutar(Acciones.compilar(obtenerArchivo()));
        //
        //
        quickTerminal.ejecutar(new File("temp.cpp"));
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Mavenproject1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Mavenproject1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Mavenproject1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Mavenproject1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        FontLoader.loadFont("RobotoMono-Regular.ttf");
        FontLoader.loadFont("RobotoMono-Light.ttf");
        FontLoader.loadFont("SF-Pro.ttf");

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                Mavenproject1 window = new Mavenproject1();
                window.setVisible(true);
                window.setBounds(0, 0, 1280, 720);
                window.setLocationRelativeTo(null);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextPane jTextPane1;
    public static JTextPane jTextArea2;
    public static JMenu archive = new JMenu("untitled.tovar");

    // Solo es de apoyo
    ImageIcon iconConsola;
    ImageIcon iconClear;
    ImageIcon iconMax;
    ImageIcon iconMin;
    ImageIcon iconClear_hover;
    ImageIcon iconMax_hover;
    ImageIcon iconMin_hover;

    JSplitPane splitPane;
    public static QuickTerminal quickTerminal;

    JFrame ventana;


    // End of variables declaration//GEN-END:variables

    public static void writeToCppField(String code){
        String formattedCode = CppFormatter.formatCode(code);
        jTextArea2.setText(formattedCode);
    }

    private File obtenerArchivo()
    {
        try 
        {
            String codigo = jTextPane1.getText();
            
            File tempFile = File.createTempFile("codigo", ".txt");
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile)))
            {
                writer.write(codigo);
                return tempFile;
            }
        } 
        catch (IOException ex) 
        {
            System.out.println(ex);
            return null;
        }
    }
}
